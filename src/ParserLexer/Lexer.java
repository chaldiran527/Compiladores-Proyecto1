// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/ParserLexer/lexerCup.jflex

/* JFlex example: partial Java language lexer specification */
package ParserLexer;
import java.io.StringReader;
import java_cup.runtime.*;

/* Options and declarations */

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ERROR = 4;
  public static final int DECREMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\2\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\25\2\6\1\26\1\27\1\30\1\6\1\31\4\12"+
    "\1\32\25\12\1\33\1\34\1\35\1\36\1\37\1\6"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\12\1\46"+
    "\1\47\1\12\1\50\1\51\1\12\1\52\1\53\1\54"+
    "\1\12\1\55\1\56\1\57\1\60\1\12\1\61\3\12"+
    "\1\62\1\63\1\64\1\65\6\0\1\66\32\0\2\6"+
    "\4\12\4\6\1\12\2\6\1\0\7\6\1\12\4\6"+
    "\1\12\5\6\27\12\1\6\37\12\1\6\u01ca\12\4\6"+
    "\14\12\16\6\5\12\7\6\1\12\1\6\1\12\21\6"+
    "\160\0\5\12\1\6\2\12\2\6\4\12\1\6\1\12"+
    "\6\6\1\12\1\6\3\12\1\6\1\12\1\6\24\12"+
    "\1\6\123\12\1\6\213\12\1\6\5\0\2\6\246\12"+
    "\1\6\46\12\2\6\1\12\7\6\47\12\7\6\1\12"+
    "\1\6\55\0\1\6\1\0\1\6\2\0\1\6\2\0"+
    "\1\6\1\0\10\6\33\12\5\6\3\12\15\6\6\0"+
    "\5\6\1\12\4\6\13\0\1\6\1\0\3\6\53\12"+
    "\37\0\4\6\2\12\1\0\143\12\1\6\1\12\10\0"+
    "\1\6\6\0\2\12\2\0\1\6\4\0\2\12\12\0"+
    "\3\12\2\6\1\12\17\6\1\0\1\12\1\0\36\12"+
    "\33\0\2\6\131\12\13\0\1\12\16\6\12\0\41\12"+
    "\11\0\2\12\4\6\1\12\5\6\26\12\4\0\1\12"+
    "\11\0\1\12\3\0\1\12\5\0\22\6\31\12\3\0"+
    "\4\6\13\12\65\6\25\12\1\6\10\12\26\6\60\0"+
    "\66\12\3\0\1\12\22\0\1\12\7\0\12\12\2\0"+
    "\2\6\12\0\1\6\20\12\3\0\1\6\10\12\2\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\1\12\3\6"+
    "\4\12\2\6\1\0\1\12\7\0\2\6\2\0\2\6"+
    "\3\0\1\12\10\6\1\0\4\6\2\12\1\6\3\12"+
    "\2\0\2\6\12\0\4\12\7\6\2\12\4\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\7\6"+
    "\1\12\6\0\1\6\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\5\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\2\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\1\6\1\12\20\6\1\0\1\12\1\6\6\12"+
    "\3\6\3\12\1\6\4\12\3\6\2\12\1\6\1\12"+
    "\1\6\2\12\3\6\2\12\3\6\3\12\3\6\14\12"+
    "\4\6\5\0\3\6\3\0\1\6\4\0\2\6\1\12"+
    "\6\6\1\0\16\6\12\0\11\6\1\12\6\6\4\0"+
    "\1\6\10\12\1\6\3\12\1\6\27\12\1\6\20\12"+
    "\3\6\1\12\7\0\1\6\3\0\1\6\4\0\7\6"+
    "\2\0\1\6\3\12\5\6\2\12\2\0\2\6\12\0"+
    "\20\6\1\12\3\0\1\6\10\12\1\6\3\12\1\6"+
    "\27\12\1\6\12\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\7\6"+
    "\1\12\1\6\2\12\2\0\2\6\12\0\1\6\2\12"+
    "\15\6\4\0\1\6\10\12\1\6\3\12\1\6\51\12"+
    "\2\0\1\12\7\0\1\6\3\0\1\6\4\0\1\12"+
    "\5\6\3\12\1\0\7\6\3\12\2\0\2\6\12\0"+
    "\12\6\6\12\2\6\2\0\1\6\22\12\3\6\30\12"+
    "\1\6\11\12\1\6\1\12\2\6\7\12\3\6\1\0"+
    "\4\6\6\0\1\6\1\0\1\6\10\0\6\6\12\0"+
    "\2\6\2\0\15\6\60\12\1\0\2\12\7\0\4\6"+
    "\10\12\10\0\1\6\12\0\47\6\2\12\1\6\1\12"+
    "\2\6\2\12\1\6\1\12\2\6\1\12\6\6\4\12"+
    "\1\6\7\12\1\6\3\12\1\6\1\12\1\6\1\12"+
    "\2\6\2\12\1\6\4\12\1\0\2\12\6\0\1\6"+
    "\2\0\1\12\2\6\5\12\1\6\1\12\1\6\6\0"+
    "\2\6\12\0\2\6\4\12\40\6\1\12\27\6\2\0"+
    "\6\6\12\0\13\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\2\0\10\12\1\6\44\12\4\6\24\0\1\6"+
    "\2\0\5\12\13\0\1\6\44\0\11\6\1\0\71\6"+
    "\53\12\24\0\1\12\12\0\6\6\6\12\4\0\4\12"+
    "\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12"+
    "\14\0\1\12\17\0\2\6\46\12\1\6\1\12\5\6"+
    "\1\12\2\6\53\12\1\6\115\12\1\6\4\12\2\6"+
    "\7\12\1\6\1\12\1\6\4\12\2\6\51\12\1\6"+
    "\4\12\2\6\41\12\1\6\4\12\2\6\7\12\1\6"+
    "\1\12\1\6\4\12\2\6\17\12\1\6\71\12\1\6"+
    "\4\12\2\6\103\12\2\6\3\0\40\6\20\12\20\6"+
    "\126\12\2\6\6\12\3\6\u016c\12\2\6\21\12\1\6"+
    "\32\12\5\6\113\12\3\6\13\12\7\6\15\12\1\6"+
    "\4\12\3\0\13\6\22\12\3\0\13\6\22\12\2\0"+
    "\14\6\15\12\1\6\3\12\1\6\2\0\14\6\64\12"+
    "\40\0\3\6\1\12\3\6\2\12\1\0\2\6\12\0"+
    "\41\6\4\0\1\6\12\0\6\6\130\12\10\6\5\12"+
    "\2\0\42\12\1\0\1\12\5\6\106\12\12\6\37\12"+
    "\1\6\14\0\4\6\14\0\12\6\12\0\36\12\2\6"+
    "\5\12\13\6\54\12\4\6\32\12\6\6\12\0\46\6"+
    "\27\12\5\0\4\6\65\12\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\12\10\6\16\0\102\6"+
    "\5\0\57\12\21\0\7\12\4\6\12\0\21\6\11\0"+
    "\14\6\3\0\36\12\15\0\2\12\12\0\54\12\16\0"+
    "\14\6\44\12\24\0\10\6\12\0\3\6\3\12\12\0"+
    "\44\12\2\6\11\12\107\6\3\0\1\6\25\0\4\12"+
    "\1\0\4\12\3\0\2\12\3\0\6\6\300\12\72\0"+
    "\1\6\5\0\26\12\2\6\6\12\2\6\46\12\2\6"+
    "\6\12\2\6\10\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\37\12\2\6\65\12\1\6\7\12\1\6"+
    "\1\12\3\6\3\12\1\6\7\12\3\6\4\12\2\6"+
    "\6\12\4\6\15\12\5\6\3\12\1\6\7\12\16\6"+
    "\5\0\30\6\2\3\5\0\20\6\2\12\23\6\1\12"+
    "\13\6\5\0\1\6\12\0\1\6\1\12\15\6\1\12"+
    "\20\6\15\12\3\6\40\12\20\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\12\4\6\1\12\2\6\12\12"+
    "\1\6\1\12\3\6\5\12\6\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\4\12\1\6\13\12\2\6\4\12"+
    "\5\6\5\12\4\6\1\12\21\6\51\12\u0177\6\57\12"+
    "\1\6\57\12\1\6\205\12\6\6\4\12\3\0\2\12"+
    "\14\6\46\12\1\6\1\12\5\6\1\12\2\6\70\12"+
    "\7\6\1\12\17\6\1\0\27\12\11\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\40\0\57\6"+
    "\1\12\325\6\3\12\31\6\11\12\6\0\1\6\5\12"+
    "\2\6\5\12\4\6\126\12\2\6\2\0\2\6\3\12"+
    "\1\6\132\12\1\6\4\12\5\6\52\12\2\6\136\12"+
    "\21\6\33\12\65\6\306\12\112\6\353\12\25\6\215\12"+
    "\103\6\56\12\2\6\15\12\3\6\20\12\12\0\2\12"+
    "\24\6\57\12\1\0\4\6\12\0\1\6\37\12\2\0"+
    "\120\12\2\0\45\6\11\12\2\6\147\12\2\6\44\12"+
    "\1\6\10\12\77\6\13\12\1\0\3\12\1\0\4\12"+
    "\1\0\27\12\5\0\20\6\1\12\7\6\64\12\14\6"+
    "\2\0\62\12\22\0\12\6\12\0\6\6\22\0\6\12"+
    "\3\6\1\12\1\6\1\12\2\6\12\0\34\12\10\0"+
    "\2\6\27\12\15\0\14\6\35\12\3\6\4\0\57\12"+
    "\16\0\16\6\1\12\12\0\6\6\5\12\1\0\12\12"+
    "\12\0\5\12\1\6\51\12\16\0\11\6\3\12\1\0"+
    "\10\12\2\0\2\6\12\0\6\6\27\12\3\6\1\12"+
    "\3\0\62\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\6\3\12\2\6\13\12"+
    "\5\0\2\6\3\12\2\0\12\6\6\12\2\6\6\12"+
    "\2\6\6\12\11\6\7\12\1\6\7\12\1\6\53\12"+
    "\1\6\12\12\12\6\163\12\10\0\1\6\2\0\2\6"+
    "\12\0\6\6\244\12\14\6\27\12\4\6\61\12\4\6"+
    "\u0100\3\156\12\2\6\152\12\46\6\7\12\14\6\5\12"+
    "\5\6\1\12\1\0\12\12\1\6\15\12\1\6\5\12"+
    "\1\6\1\12\1\6\2\12\1\6\2\12\1\6\154\12"+
    "\41\6\153\12\22\6\100\12\2\6\66\12\50\6\15\12"+
    "\3\6\20\0\20\6\20\0\3\6\2\12\30\6\3\12"+
    "\31\6\1\12\6\6\5\12\1\6\207\12\2\6\1\0"+
    "\4\6\1\12\13\6\12\0\7\6\32\12\4\6\1\12"+
    "\1\6\32\12\13\6\131\12\3\6\6\12\2\6\6\12"+
    "\2\6\6\12\2\6\3\12\3\6\2\12\3\6\2\12"+
    "\22\6\3\0\4\6\14\12\1\6\32\12\1\6\23\12"+
    "\1\6\2\12\1\6\17\12\2\6\16\12\42\6\173\12"+
    "\105\6\65\12\210\6\1\0\202\6\35\12\3\6\61\12"+
    "\17\6\1\0\37\6\40\12\15\6\36\12\5\6\46\12"+
    "\5\0\5\6\36\12\2\6\44\12\4\6\10\12\1\6"+
    "\5\12\52\6\236\12\2\6\12\0\6\6\44\12\4\6"+
    "\44\12\4\6\50\12\10\6\64\12\234\6\67\12\11\6"+
    "\26\12\12\6\10\12\230\6\6\12\2\6\1\12\1\6"+
    "\54\12\1\6\2\12\3\6\1\12\2\6\27\12\12\6"+
    "\27\12\11\6\37\12\101\6\23\12\1\6\2\12\12\6"+
    "\26\12\12\6\32\12\106\6\70\12\6\6\2\12\100\6"+
    "\1\12\3\0\1\6\2\0\5\6\4\0\4\12\1\6"+
    "\3\12\1\6\33\12\4\6\3\0\4\6\1\0\40\6"+
    "\35\12\3\6\35\12\43\6\10\12\1\6\34\12\2\0"+
    "\31\6\66\12\12\6\26\12\12\6\23\12\15\6\22\12"+
    "\156\6\111\12\67\6\63\12\15\6\63\12\15\6\3\0"+
    "\65\12\17\0\37\6\12\0\17\6\4\0\55\12\13\0"+
    "\2\6\1\0\22\6\31\12\7\6\12\0\6\6\3\0"+
    "\44\12\16\0\1\6\12\0\20\6\43\12\1\0\2\6"+
    "\1\12\11\6\3\0\60\12\16\0\4\12\5\6\3\0"+
    "\3\6\12\0\1\12\1\6\1\12\43\6\22\12\1\6"+
    "\31\12\14\0\6\6\1\0\101\6\7\12\1\6\1\12"+
    "\1\6\4\12\1\6\17\12\1\6\12\12\7\6\57\12"+
    "\14\0\5\6\12\0\6\6\4\0\1\6\10\12\2\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\2\12\1\6"+
    "\5\12\2\6\1\0\1\12\7\0\2\6\2\0\2\6"+
    "\3\0\2\6\1\12\6\6\1\0\5\6\5\12\2\0"+
    "\2\6\7\0\3\6\5\0\213\6\65\12\22\0\4\12"+
    "\5\6\12\0\46\6\60\12\24\0\2\12\1\6\1\12"+
    "\10\6\12\0\246\6\57\12\7\0\2\6\11\0\27\6"+
    "\4\12\2\0\42\6\60\12\21\0\3\6\1\12\13\6"+
    "\12\0\46\6\53\12\15\0\10\6\12\0\66\6\32\12"+
    "\3\6\17\0\4\6\12\0\u0166\6\100\12\12\0\25\6"+
    "\2\12\12\0\50\12\7\0\1\12\4\0\10\6\1\0"+
    "\10\6\1\12\13\0\50\12\2\6\4\12\20\0\46\6"+
    "\71\12\7\6\11\12\1\6\45\12\10\0\1\6\10\0"+
    "\1\12\17\6\12\0\30\6\36\12\2\6\26\0\1\6"+
    "\16\0\111\6\7\12\1\6\2\12\1\6\46\12\6\0"+
    "\3\6\1\0\1\6\2\0\1\6\7\0\1\12\1\0"+
    "\10\6\12\0\246\6\232\12\146\6\157\12\21\6\304\12"+
    "\274\6\57\12\321\6\107\12\271\6\71\12\7\6\37\12"+
    "\1\6\12\0\146\6\36\12\2\6\5\0\13\6\60\12"+
    "\7\0\11\6\4\12\14\6\12\0\11\6\25\12\5\6"+
    "\23\12\160\6\105\12\13\6\1\12\56\0\20\6\4\0"+
    "\15\12\100\6\2\12\36\6\355\12\23\6\363\12\15\6"+
    "\37\12\121\6\u018c\12\4\6\153\12\5\6\15\12\3\6"+
    "\11\12\7\6\12\12\3\6\2\0\1\6\4\0\301\6"+
    "\5\0\3\6\26\0\2\6\7\0\36\6\4\0\224\6"+
    "\3\0\273\6\125\12\1\6\107\12\1\6\2\12\2\6"+
    "\1\12\2\6\2\12\2\6\4\12\1\6\14\12\1\6"+
    "\1\12\1\6\7\12\1\6\101\12\1\6\4\12\2\6"+
    "\10\12\1\6\7\12\1\6\34\12\1\6\4\12\1\6"+
    "\5\12\1\6\1\12\3\6\7\12\1\6\u0154\12\2\6"+
    "\31\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\10\12\2\6\151\0\4\6"+
    "\62\0\10\6\1\0\16\6\1\0\26\6\5\0\1\6"+
    "\17\0\120\6\7\0\1\6\21\0\2\6\7\0\1\6"+
    "\2\0\1\6\5\0\325\6\305\12\13\6\7\0\51\6"+
    "\104\12\7\0\5\6\12\0\246\6\4\12\1\6\33\12"+
    "\1\6\2\12\1\6\1\12\2\6\1\12\1\6\12\12"+
    "\1\6\4\12\1\6\1\12\1\6\1\12\6\6\1\12"+
    "\4\6\1\12\1\6\1\12\1\6\1\12\1\6\3\12"+
    "\1\6\2\12\1\6\1\12\2\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\2\12"+
    "\1\6\1\12\2\6\4\12\1\6\7\12\1\6\4\12"+
    "\1\6\4\12\1\6\1\12\1\6\12\12\1\6\21\12"+
    "\5\6\3\12\1\6\5\12\1\6\21\12\104\6\327\12"+
    "\51\6\65\12\13\6\336\12\2\6\u0182\12\16\6\u0131\12"+
    "\37\6\36\12\343\6\1\0\36\6\140\0\200\6\360\0"+
    "\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\0\1\2\1\3\1\4\2\3"+
    "\1\5\1\6\1\7\1\10\1\2\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\20\1\21\1\2\1\22"+
    "\1\3\1\23\1\24\1\25\15\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\4\1\1\1\36"+
    "\1\1\1\0\1\37\1\40\1\41\2\20\1\1\1\42"+
    "\1\2\2\1\1\43\1\44\1\45\1\46\5\10\1\47"+
    "\3\10\1\50\7\10\1\51\1\52\1\53\1\54\2\55"+
    "\2\0\1\1\2\2\1\1\1\20\1\0\1\20\1\10"+
    "\1\56\6\10\1\57\1\60\3\10\1\61\3\10\2\20"+
    "\1\0\3\1\1\0\3\10\1\62\1\63\1\64\2\10"+
    "\1\65\4\10\2\0\1\3\1\1\1\0\2\10\1\66"+
    "\1\67\1\70\2\10\1\71\1\72\1\3\2\10\1\73"+
    "\1\74\1\10\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\334\0\334"+
    "\0\u014a\0\u0181\0\u0113\0\334\0\u01b8\0\u01ef\0\334\0\334"+
    "\0\u0226\0\u025d\0\334\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370"+
    "\0\u03a7\0\u03de\0\u0415\0\334\0\334\0\334\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\334\0\334\0\334\0\334\0\u0113"+
    "\0\u0113\0\u0113\0\u0717\0\u0113\0\u074e\0\334\0\334\0\u0785"+
    "\0\u07bc\0\334\0\u0113\0\u0113\0\u07f3\0\u082a\0\u0861\0\334"+
    "\0\u0898\0\u08cf\0\u0906\0\334\0\334\0\334\0\334\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u01b8\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u01b8\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0113\0\u0113\0\u0113\0\u0113\0\334\0\u0113\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u01b8\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u01b8"+
    "\0\u01b8\0\u0fe6\0\u101d\0\u1054\0\u01b8\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u0df7\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u01b8\0\u01b8\0\u01b8\0\u131f\0\u1356\0\u01b8"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u0ce4\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u01b8\0\u01b8\0\u01b8\0\u15b3\0\u15ea"+
    "\0\u01b8\0\u01b8\0\u1167\0\u1621\0\u1658\0\u01b8\0\u01b8\0\u168f"+
    "\0\u01b8\0\u01b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\5\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\15\1\34\1\5\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\15\1\46\4\15"+
    "\1\47\1\50\1\51\1\15\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\7\2\60\1\61\2\60\1\61\2\60"+
    "\1\62\23\60\1\63\32\60\1\7\2\64\2\7\1\64"+
    "\2\7\1\64\6\7\1\64\1\7\1\64\15\7\1\65"+
    "\27\7\67\61\1\66\2\0\2\66\1\0\2\66\1\0"+
    "\6\66\1\0\1\66\1\0\45\66\71\0\1\6\64\0"+
    "\1\66\2\0\2\66\1\0\2\66\1\0\6\66\1\0"+
    "\1\66\1\0\5\66\1\67\37\66\1\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\23\15\4\66"+
    "\1\15\1\70\1\71\1\0\2\70\1\0\2\70\1\71"+
    "\6\70\1\71\1\70\1\71\45\70\1\66\2\0\2\66"+
    "\1\0\2\66\1\0\5\66\1\72\1\0\1\66\1\0"+
    "\45\66\17\0\1\73\70\0\1\74\2\0\1\75\1\76"+
    "\41\0\1\66\2\0\2\66\1\0\2\66\1\0\5\66"+
    "\1\77\1\0\1\66\1\0\1\66\1\100\13\66\1\101"+
    "\30\66\2\0\2\66\1\0\2\66\1\0\6\66\1\0"+
    "\1\66\1\0\1\102\7\66\1\103\11\66\1\103\23\66"+
    "\2\0\2\66\1\0\2\66\1\0\6\66\1\0\1\66"+
    "\1\0\1\102\1\66\2\27\4\66\1\103\11\66\1\103"+
    "\23\66\2\0\2\66\1\0\2\66\1\0\6\66\1\0"+
    "\1\66\1\0\5\66\1\104\40\66\2\0\2\66\1\0"+
    "\2\66\1\0\6\66\1\0\1\66\1\0\5\66\1\105"+
    "\40\66\2\0\2\66\1\0\2\66\1\0\6\66\1\0"+
    "\1\66\1\0\5\66\1\106\37\66\2\33\1\6\2\33"+
    "\1\11\61\33\1\15\2\0\2\66\1\0\2\66\1\0"+
    "\1\66\1\15\4\66\1\0\1\66\1\0\1\66\1\107"+
    "\2\15\4\66\1\15\4\66\23\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\2\15"+
    "\1\110\13\15\1\111\4\15\4\66\2\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\14\15\1\112"+
    "\1\15\1\113\4\15\4\66\2\15\2\0\2\66\1\0"+
    "\2\66\1\0\1\66\1\15\4\66\1\0\1\66\1\0"+
    "\2\66\2\15\4\66\1\15\4\66\7\15\1\114\13\15"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\14\15\1\115\6\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\12\15"+
    "\1\116\10\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\12\15\1\117\1\15\1\120"+
    "\6\15\4\66\2\15\2\0\2\66\1\0\2\66\1\0"+
    "\1\66\1\15\4\66\1\0\1\66\1\0\2\66\2\15"+
    "\4\66\1\15\4\66\6\15\1\121\4\15\1\122\7\15"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\16\15\1\123\4\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\5\15"+
    "\1\124\15\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\20\15\1\125\1\15\1\126"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\13\15\1\127\7\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\7\15"+
    "\1\130\13\15\4\66\1\15\10\0\1\131\41\0\1\132"+
    "\2\0\1\133\1\0\1\134\7\0\1\66\2\0\2\66"+
    "\1\0\2\66\1\0\6\66\1\0\1\66\1\0\1\66"+
    "\1\107\44\66\2\0\2\66\1\0\2\66\1\0\2\66"+
    "\1\135\3\66\1\0\1\66\1\0\45\66\13\0\1\136"+
    "\75\0\1\137\7\0\1\140\11\0\1\140\44\0\1\137"+
    "\1\0\2\76\4\0\1\140\11\0\1\140\22\0\1\66"+
    "\2\0\2\66\1\0\2\66\1\0\5\66\1\141\1\0"+
    "\1\66\1\0\45\66\1\142\2\143\2\142\1\143\2\142"+
    "\1\143\6\142\1\143\1\142\1\143\15\142\1\144\27\142"+
    "\1\66\2\0\2\66\1\0\2\66\1\0\6\66\1\0"+
    "\1\66\1\0\2\66\2\145\42\66\2\0\2\66\1\0"+
    "\2\66\1\0\6\66\1\0\1\66\1\146\2\66\2\147"+
    "\41\66\1\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\17\15\1\150\3\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\16\15"+
    "\1\151\4\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\14\15\1\152\6\15\4\66"+
    "\2\15\2\0\2\66\1\0\2\66\1\0\1\66\1\15"+
    "\4\66\1\0\1\66\1\0\2\66\2\15\4\66\1\15"+
    "\4\66\5\15\1\153\15\15\4\66\2\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\1\15\1\154"+
    "\21\15\4\66\2\15\2\0\2\66\1\0\2\66\1\0"+
    "\1\66\1\15\4\66\1\0\1\66\1\0\2\66\2\15"+
    "\4\66\1\15\4\66\10\15\1\155\6\15\1\156\3\15"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\14\15\1\157\6\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\16\15"+
    "\1\160\4\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\20\15\1\161\2\15\4\66"+
    "\2\15\2\0\2\66\1\0\2\66\1\0\1\66\1\15"+
    "\4\66\1\0\1\66\1\0\2\66\2\15\4\66\1\15"+
    "\4\66\10\15\1\162\12\15\4\66\2\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\1\15\1\163"+
    "\16\15\1\164\2\15\4\66\2\15\2\0\2\66\1\0"+
    "\2\66\1\0\1\66\1\15\4\66\1\0\1\66\1\0"+
    "\2\66\2\15\4\66\1\15\4\66\16\15\1\165\4\15"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\10\15\1\166\12\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\20\15"+
    "\1\167\2\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\10\15\1\170\12\15\4\66"+
    "\1\15\24\0\2\171\62\0\1\146\2\0\2\172\41\0"+
    "\1\141\2\173\2\141\1\173\2\141\1\173\5\141\1\174"+
    "\1\173\1\141\1\173\15\141\1\175\27\141\1\142\2\143"+
    "\2\142\1\143\2\142\1\143\6\142\1\143\1\142\1\143"+
    "\15\142\1\176\27\142\37\143\1\177\27\143\1\66\2\0"+
    "\2\66\1\0\2\66\1\0\6\66\1\0\1\66\1\0"+
    "\1\66\1\10\13\66\1\144\30\66\2\0\2\66\1\0"+
    "\2\66\1\0\6\66\1\0\1\66\1\0\2\66\2\145"+
    "\4\66\1\103\11\66\1\103\22\66\24\0\2\172\41\0"+
    "\1\66\2\0\2\66\1\0\2\66\1\0\6\66\1\0"+
    "\1\66\1\0\2\66\2\147\41\66\1\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\20\15\1\200"+
    "\2\15\4\66\2\15\2\0\2\66\1\0\2\66\1\0"+
    "\1\66\1\15\4\66\1\0\1\66\1\0\2\66\2\15"+
    "\4\66\1\15\4\66\12\15\1\201\10\15\4\66\2\15"+
    "\2\0\2\66\1\0\2\66\1\0\1\66\1\15\4\66"+
    "\1\0\1\66\1\0\2\66\2\15\4\66\1\15\4\66"+
    "\1\15\1\202\21\15\4\66\2\15\2\0\2\66\1\0"+
    "\2\66\1\0\1\66\1\15\4\66\1\0\1\66\1\0"+
    "\2\66\2\15\4\66\1\15\4\66\16\15\1\203\4\15"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\6\15\1\204\14\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\5\15"+
    "\1\205\15\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\1\15\1\206\21\15\4\66"+
    "\2\15\2\0\2\66\1\0\2\66\1\0\1\66\1\15"+
    "\4\66\1\0\1\66\1\0\2\66\2\15\4\66\1\15"+
    "\4\66\13\15\1\207\7\15\4\66\2\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\4\15\1\210"+
    "\16\15\4\66\2\15\2\0\2\66\1\0\2\66\1\0"+
    "\1\66\1\15\4\66\1\0\1\66\1\0\2\66\2\15"+
    "\4\66\1\15\4\66\21\15\1\211\1\15\4\66\2\15"+
    "\2\0\2\66\1\0\2\66\1\0\1\66\1\15\4\66"+
    "\1\0\1\66\1\0\2\66\2\15\4\66\1\15\4\66"+
    "\20\15\1\212\2\15\4\66\2\15\2\0\2\66\1\0"+
    "\2\66\1\0\1\66\1\15\4\66\1\0\1\66\1\0"+
    "\2\66\2\15\4\66\1\15\4\66\10\15\1\213\12\15"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\12\15\1\214\10\15\4\66\1\15\24\0"+
    "\2\171\4\0\1\140\11\0\1\140\22\0\16\173\1\215"+
    "\20\173\1\216\27\173\1\141\2\173\2\141\1\173\2\141"+
    "\1\173\5\141\1\174\1\173\1\141\1\173\1\141\1\217"+
    "\13\141\1\175\30\141\2\173\2\141\1\173\2\141\1\173"+
    "\6\141\1\173\1\141\1\173\1\141\1\66\13\141\1\175"+
    "\27\141\1\220\2\221\2\220\1\221\2\220\1\221\6\220"+
    "\1\221\1\220\1\221\1\220\1\10\13\220\1\176\27\220"+
    "\23\221\1\6\13\221\1\177\27\221\1\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\16\15\1\222"+
    "\4\15\4\66\2\15\2\0\2\66\1\0\2\66\1\0"+
    "\1\66\1\15\4\66\1\0\1\66\1\0\2\66\2\15"+
    "\4\66\1\15\4\66\5\15\1\223\15\15\4\66\2\15"+
    "\2\0\2\66\1\0\2\66\1\0\1\66\1\15\4\66"+
    "\1\0\1\66\1\0\2\66\2\15\4\66\1\15\4\66"+
    "\11\15\1\224\11\15\4\66\2\15\2\0\2\66\1\0"+
    "\2\66\1\0\1\66\1\15\4\66\1\0\1\66\1\0"+
    "\2\66\2\15\4\66\1\15\4\66\20\15\1\225\2\15"+
    "\4\66\2\15\2\0\2\66\1\0\2\66\1\0\1\66"+
    "\1\15\4\66\1\0\1\66\1\0\2\66\2\15\4\66"+
    "\1\15\4\66\20\15\1\226\2\15\4\66\2\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\16\15"+
    "\1\227\4\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\3\15\1\230\17\15\4\66"+
    "\2\15\2\0\2\66\1\0\2\66\1\0\1\66\1\15"+
    "\4\66\1\0\1\66\1\0\2\66\2\15\4\66\1\15"+
    "\4\66\12\15\1\231\10\15\4\66\2\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\5\15\1\232"+
    "\15\15\4\66\1\15\16\173\1\215\4\173\1\233\13\173"+
    "\1\216\52\173\1\0\13\173\1\216\27\173\1\220\2\221"+
    "\2\220\1\221\2\220\1\221\6\220\1\221\1\220\1\221"+
    "\15\220\1\176\27\220\37\221\1\177\27\221\1\15\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\15\4\66\1\0"+
    "\1\66\1\0\2\66\2\15\4\66\1\15\4\66\1\15"+
    "\1\234\21\15\4\66\2\15\2\0\2\66\1\0\2\66"+
    "\1\0\1\66\1\15\4\66\1\0\1\66\1\0\2\66"+
    "\2\15\4\66\1\15\4\66\1\15\1\235\21\15\4\66"+
    "\2\15\2\0\2\66\1\0\2\66\1\0\1\66\1\15"+
    "\4\66\1\0\1\66\1\0\2\66\2\15\4\66\1\15"+
    "\4\66\13\15\1\236\7\15\4\66\2\15\2\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\15\4\66\1\0\1\66"+
    "\1\0\2\66\2\15\4\66\1\15\4\66\7\15\1\237"+
    "\13\15\4\66\2\15\2\0\2\66\1\0\2\66\1\0"+
    "\1\66\1\15\4\66\1\0\1\66\1\0\2\66\2\15"+
    "\4\66\1\15\4\66\3\15\1\240\17\15\4\66\2\15"+
    "\2\0\2\66\1\0\2\66\1\0\1\66\1\15\4\66"+
    "\1\0\1\66\1\0\2\66\2\15\4\66\1\15\4\66"+
    "\13\15\1\241\7\15\4\66\2\15\2\0\2\66\1\0"+
    "\2\66\1\0\1\66\1\15\4\66\1\0\1\66\1\0"+
    "\2\66\2\15\4\66\1\15\4\66\20\15\1\242\2\15"+
    "\4\66\1\15";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5830];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\0\1\1\1\11\4\1\1\11"+
    "\44\1\3\11\1\1\1\11\4\1\1\0\1\1\2\11"+
    "\34\1\4\11\1\1\1\11\2\0\5\1\1\0\24\1"+
    "\1\0\3\1\1\0\15\1\2\0\2\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    private int errorCount = 0;

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    // Método para manejar errores y recuperación
    private void handleError(String message) {
        System.err.println("Error: " + message + " en la línea " + yyline + ", columna " + yycolumn);
        errorCount++;
        // Puedes agregar más lógica de recuperación aquí si es necesario
        // Por ejemplo, puedes avanzar al siguiente ';' o '}' si el error ocurre dentro de una expresión o bloque.
        // También puedes ignorar caracteres hasta encontrar un punto seguro para continuar.
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { // Ignorar cualquier otro carácter durante la recuperación
    yycolumn += yylength();
    return symbol(sym.ERROR);
            }
          // fall through
          case 63: break;
          case 2:
            { return symbol(sym.ERROR);
            }
          // fall through
          case 64: break;
          case 3:
            { /* ignore */
            }
          // fall through
          case 65: break;
          case 4:
            { yycolumn++;
        return symbol(sym.ERROR);
            }
          // fall through
          case 66: break;
          case 5:
            { return symbol(sym.not_gaspar);
            }
          // fall through
          case 67: break;
          case 6:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 68: break;
          case 7:
            { return symbol(sym.or_balthassar);
            }
          // fall through
          case 69: break;
          case 8:
            { return symbol(sym.IDENTIFIER);
            }
          // fall through
          case 70: break;
          case 9:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 71: break;
          case 10:
            { return symbol(sym.CIERRECUENTO);
            }
          // fall through
          case 72: break;
          case 11:
            { return symbol(sym.mul_prancer);
            }
          // fall through
          case 73: break;
          case 12:
            { return symbol(sym.sum_dasher);
            }
          // fall through
          case 74: break;
          case 13:
            { return symbol(sym.SEPARAREGALO);
            }
          // fall through
          case 75: break;
          case 14:
            { return symbol(sym.res_dancer);
            }
          // fall through
          case 76: break;
          case 15:
            { return symbol(sym.div_float_blitzen);
            }
          // fall through
          case 77: break;
          case 16:
            { return symbol(sym.l_float_padrenavidad);
            }
          // fall through
          case 78: break;
          case 17:
            { return symbol(sym.l_slinky);
            }
          // fall through
          case 79: break;
          case 18:
            { return symbol(sym.g_merryberry);
            }
          // fall through
          case 80: break;
          case 19:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 81: break;
          case 20:
            { return symbol(sym.CIERRAEMPAQUE);
            }
          // fall through
          case 82: break;
          case 21:
            { return symbol(sym.and_melchior);
            }
          // fall through
          case 83: break;
          case 22:
            { return symbol(sym.ABREREGALO);
            }
          // fall through
          case 84: break;
          case 23:
            { return symbol(sym.FINREGALO);
            }
          // fall through
          case 85: break;
          case 24:
            { return symbol(sym.CIERRAREGALO);
            }
          // fall through
          case 86: break;
          case 25:
            { return symbol(sym.mod_comet);
            }
          // fall through
          case 87: break;
          case 26:
            { string.append( yytext() );
            }
          // fall through
          case 88: break;
          case 27:
            { //handleError("Carácter no reconocido");
                                    yycolumn++;
                                    return symbol(sym.ERROR);
            }
          // fall through
          case 89: break;
          case 28:
            { yybegin(YYINITIAL); 
                                    return symbol(sym.t_string_nicolas, 
                                    ("\"" + string.toString() + "\""));
            }
          // fall through
          case 90: break;
          case 29:
            { string.append('\\');
            }
          // fall through
          case 91: break;
          case 30:
            { return symbol(sym.ne_tinseltoes);
            }
          // fall through
          case 92: break;
          case 31:
            { return symbol(sym.pow_cupid);
            }
          // fall through
          case 93: break;
          case 32:
            { return symbol(sym.GRINCH);
            }
          // fall through
          case 94: break;
          case 33:
            { return symbol(sym.QUIEN);
            }
          // fall through
          case 95: break;
          case 34:
            { return symbol(sym.div_int_vixen);
            }
          // fall through
          case 96: break;
          case 35:
            { return symbol(sym.ENTREGA);
            }
          // fall through
          case 97: break;
          case 36:
            { return symbol(sym.e_jinglebell);
            }
          // fall through
          case 98: break;
          case 37:
            { return symbol(sym.ge_snowflake);
            }
          // fall through
          case 99: break;
          case 38:
            { // Fin de comentario no encontrado, se intenta recuperar
    yybegin(YYINITIAL);
    yycolumn += 2; // Avanzar dos caracteres para evitar un bucle infinito
    return symbol(sym.ERROR);
            }
          // fall through
          case 100: break;
          case 39:
            { return symbol(sym.HACE);
            }
          // fall through
          case 101: break;
          case 40:
            { return symbol(sym.ELFO);
            }
          // fall through
          case 102: break;
          case 41:
            { string.append('\"');
            }
          // fall through
          case 103: break;
          case 42:
            { string.append('\n');
            }
          // fall through
          case 104: break;
          case 43:
            { string.append('\r');
            }
          // fall through
          case 105: break;
          case 44:
            { string.append('\t');
            }
          // fall through
          case 106: break;
          case 45:
            { return symbol(sym.REGALO);
            }
          // fall through
          case 107: break;
          case 46:
            { return symbol(sym.t_arr_noel);
            }
          // fall through
          case 108: break;
          case 47:
            { return symbol(sym.ENVUELVE);
            }
          // fall through
          case 109: break;
          case 48:
            { return symbol(sym.t_int_sinterklass);
            }
          // fall through
          case 110: break;
          case 49:
            { return symbol(sym.t_string_nicolas);
            }
          // fall through
          case 111: break;
          case 50:
            { return symbol(sym.t_char_nick);
            }
          // fall through
          case 112: break;
          case 51:
            { return symbol(sym.HADA);
            }
          // fall through
          case 113: break;
          case 52:
            { return symbol(sym.DUENDE);
            }
          // fall through
          case 114: break;
          case 53:
            { return symbol(sym.ESCUCHA);
            }
          // fall through
          case 115: break;
          case 54:
            { return symbol(sym.CORTA);
            }
          // fall through
          case 116: break;
          case 55:
            { return symbol(sym.t_float_santa);
            }
          // fall through
          case 117: break;
          case 56:
            { return symbol(sym.NARRA);
            }
          // fall through
          case 118: break;
          case 57:
            { return symbol(sym.REVISA);
            }
          // fall through
          case 119: break;
          case 58:
            { return symbol(sym.ESPERARASANTA);
            }
          // fall through
          case 120: break;
          case 59:
            { return symbol(sym.ENVIA);
            }
          // fall through
          case 121: break;
          case 60:
            { return symbol(sym.TRINEO);
            }
          // fall through
          case 122: break;
          case 61:
            { return symbol(sym.t_bool_colacho);
            }
          // fall through
          case 123: break;
          case 62:
            { return symbol(sym.NAVIDAD);
            }
          // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
