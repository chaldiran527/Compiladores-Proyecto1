/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package ParserLexer;
import java_cup.runtime.*;

action code {:
    public void hola(){
        System.out.println("Hola");
    }

    public void adios(){
        System.out.println("Adios");
    }
:}

parser code {:
    // Connect this parser to a scanner!
    BasicLexerCupV lex;

    @SupressWarnings("deprecation")
    public parser(BasicLexerCupV lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

/* define how to connect to the scanner! */
init with {: :};
scan with {: return lex.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS;
terminal Integer    NUMBER;        // our scanner provides numbers as integers

//Terminales de parentesis y llaves
terminal ABREREGALO, CIERRAREGALO, ABREEMPAQUE, CIERRAEMPAQUE, ABRECUENTO, CIERRECUENTO, SEPARAREGALO;

//Terminales de tipos
terminal t_float_santa, t_bool_colacho, t_string_nicolas, t_char_nick, l_int_dedmoroz, t_arr_noel, t_int_sinterklass, l_float_padrenavidad;

//Terminales relacionales
terminal e_jinglebell, ne_tinseltoes, g_merryberry, l_slinky, ge_snowflake, le_candycane;

//Terminales 
terminal PERSONA, NAVIDAD, IDENTIFIER, INTEGER_LITERAL, ENTREGA, REGALO, ERROR;

//Terminal de finalizador
terminal FINREGALO;
//terminal PERSONA, NAVIDAD, FINREGALO, ENTREGA;

//Terminales aritmeticos unarios de  decremento e incremento
terminal QUIEN, GRINCH;

//Terminales aritmeticos binarios
terminal sum_dasher, res_dancer, mul_prancer, div_int_vixen, div_float_blitzen, mod_comet, pow_cupid;

//Terminales operadores logicos
terminal not_gaspar, and_melchior, or_balthassar;

//Terminales estructuras de control (if, elif, else, for, do, until, return, break, while, switch)
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA, ESPERARASANTA, TRINEO;

//Terminales de lectura y escritura
terminal NARRA, ESCUCHA;

/* Non terminals */
//non terminal            expr_list;
//non terminal Integer    expr;      // used to store evaluated subexpressions


non terminal felizNavidad; 
start with felizNavidad;

felizNavidad ::= {: 
                    hola(); :} 
                PERSONA 
                {: 
                    adios(); :};
